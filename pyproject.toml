[project]
name = "riffscribe-django"
version = "0.1.0"
description = "Convert audio to guitar tabs with AI - Django + HTMX version"
readme = "README.md"
authors = [
    { name = "abdul hamid", email = "abdulachik@icloud.com" }
]
requires-python = ">=3.11"
dependencies = [
    # Django and web framework
    "django>=5.0",
    "django-htmx>=1.17",
    "django-cors-headers>=4.3",
    "whitenoise>=6.6",
    "gunicorn>=21.2",
    "python-decouple>=3.8",
    # Storage
    "django-storages[boto3]>=1.14",
    "boto3>=1.26",
    # Database
    "psycopg2-binary>=2.9",
    # Celery client (no worker dependencies)
    "celery>=5.3,<5.4",
    "redis>=5.0",
    # System monitoring
    "psutil>=5.9.0",
    # File handling
    "pillow>=10.0",
    # Authentication and forms
    "django-allauth>=0.57.0",
    "PyJWT>=2.8.0",
    "cryptography>=41.0.0",
    "django-crispy-forms>=2.1",
    "django-simple-captcha>=0.6.0",
    "requests>=2.31",
    # AI services (lightweight!)
    "openai>=1.0", # Core AI transcription service
    # Note: Heavy ML dependencies removed - now using OpenAI API instead!
    "midiutil>=1.2.1",
    "pytest-asyncio>=1.1.0",
    "numpy>=1.26.4",
    "pyguitarpro>=0.10",
]

[project.optional-dependencies]
# Lightweight AI-powered worker dependencies (90% size reduction!)
worker = [
    # Celery worker dependencies
    "vine==5.0.0",
    "kombu>=5.3,<5.4", 
    "amqp>=5.2,<5.3",
    "flower>=2.0",
    
    # Audio processing for duration calculation and chunking
    "pydub>=0.25",  # For basic audio format conversion and duration
    "librosa>=0.10.0",  # For accurate audio duration and analysis
    
    # Music processing (keep the essentials)
    "music21>=9.1",  # For music theory and notation
    "midiutil>=1.2",  # For MIDI file generation
    
    # Guitar tab formats
    "pyguitarpro>=0.10",  # For Guitar Pro file export
    
    # AI-powered transcription (replaces entire ML pipeline!)
    # Note: openai is already in main dependencies
    
    # REMOVED HEAVY DEPENDENCIES (saved ~4GB!):
    # - numpy, scipy, librosa, soundfile, audioread, resampy (audio analysis)
    # - torch, torchaudio (PyTorch models)
    # - pretty-midi (MIDI processing)
    # - demucs (4GB source separation model)
    # - basic-pitch (polyphonic transcription)
]

# Development dependencies (lightweight)
dev = [
    "pytest>=7.4",
    "pytest-django>=4.7", 
    "pytest-cov>=6.0",
    "pytest-asyncio>=1.0",  # For testing async AI services
    "pytest-playwright>=0.7",
    "pytest-env>=1.1",
    "pytest-dotenv>=0.5",
    "model-bakery>=1.19",
    "black>=23.12",
    "ruff>=0.1",
    "ipython>=8.18",
    # Lightweight audio for tests
    "pydub>=0.25",
]


infrastructure = [
    # Pulumi core
    "pulumi>=3.100.0",
    
    # AWS provider SDK
    "pulumi-aws>=6.20.0",
    
    # Additional infrastructure utilities
    "pulumi-random>=4.14.0",
    "pulumi-tls>=5.0.0",
    
    # Infrastructure management utilities  
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
]

[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["riffscribe*", "transcriber*"]

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=6.2.1",
    "pytest-django>=4.11.1",
    "pytest-env>=1.1",
    "pytest-dotenv>=0.5",
    "model-bakery>=1.19",
    "playwright>=1.55.0",
    "flower>=2.0",
]
