"""
Django settings for riffscribe project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Third party apps
    'django_htmx',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',
    'crispy_forms',
    'crispy_tailwind',
    'captcha',
    
    # Local apps
    'transcriber',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'riffscribe.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'riffscribe.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

_DATABASE_URL = config('DATABASE_URL', default=None)

def _build_databases_from_url(db_url: str):
    parsed = urlparse(db_url)
    scheme = (parsed.scheme or '').lower()
    if scheme in ('postgres', 'postgresql', 'psql', 'pgsql'):
        return {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': (parsed.path or '').lstrip('/'),
                'USER': parsed.username or '',
                'PASSWORD': parsed.password or '',
                'HOST': parsed.hostname or 'localhost',
                'PORT': str(parsed.port or '5432'),
            }
        }
    if scheme in ('sqlite', 'sqlite3'):
        db_path = (parsed.path or '').lstrip('/')
        if not db_path:
            db_path = str(BASE_DIR / 'db.sqlite3')
        return {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': db_path,
            }
        }
    # Fallback to sqlite if unknown scheme
    return {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

if _DATABASE_URL:
    DATABASES = _build_databases_from_url(_DATABASE_URL)
else:
    # Allow explicit env vars without DATABASE_URL (useful for local tests)
    db_host = config('DATABASE_HOST', default=None)
    if db_host:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': config('DATABASE_NAME', default='riffscribe'),
                'USER': config('DATABASE_USER', default='riffscribe'),
                'PASSWORD': config('DATABASE_PASSWORD', default='riffscribe_dev'),
                'HOST': db_host,
                'PORT': str(config('DATABASE_PORT', default='5432')),
            }
        }
    else:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Storage Configuration
USE_S3 = config('USE_S3', default=False, cast=bool)

if USE_S3:
    # AWS/S3/MinIO settings
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='riffscribe-media')
    AWS_S3_ENDPOINT_URL = config('AWS_S3_ENDPOINT_URL', default=None)  # For MinIO
    AWS_S3_USE_SSL = config('AWS_S3_USE_SSL', default=True, cast=bool)
    AWS_S3_VERIFY = config('AWS_S3_VERIFY', default=True, cast=bool)
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN', default=None)
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_LOCATION = 'media'
    AWS_QUERYSTRING_AUTH = False
    
    # Tell Django to use S3 for media files with signed URL support
    DEFAULT_FILE_STORAGE = 'transcriber.storage.SecureMediaStorage'
    
    # For MEDIA_URL, use a public-facing URL that browser can access
    # In development, replace Docker service name 'storage' with 'localhost'
    MEDIA_URL_ENDPOINT = config('MEDIA_URL_ENDPOINT', default=AWS_S3_ENDPOINT_URL)
    if MEDIA_URL_ENDPOINT and DEBUG and 'storage:' in MEDIA_URL_ENDPOINT:
        # Replace Docker service name with localhost for browser access
        MEDIA_URL_ENDPOINT = MEDIA_URL_ENDPOINT.replace('storage:', 'localhost:')
    
    MEDIA_URL = f'{MEDIA_URL_ENDPOINT}/{AWS_STORAGE_BUCKET_NAME}/' if MEDIA_URL_ENDPOINT else f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/'
else:
    # Local file storage
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

# Whitenoise settings for static files (always local in dev)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes

# ML Model Configuration
ML_MODELS_DIR = BASE_DIR / 'ml_models'
USE_GPU = config('USE_GPU', default=False, cast=bool)
DEMUCS_MODEL = config('DEMUCS_MODEL', default='htdemucs')
BASIC_PITCH_MODEL = config('BASIC_PITCH_MODEL', default='default')
MAX_AUDIO_LENGTH = config('MAX_AUDIO_LENGTH', default=600, cast=int)  # 10 minutes

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB

# Whisper AI Configuration
OPENAI_API_KEY = config('OPENAI_API_KEY', default='')
OPENAI_SECRET_KEY = config('OPENAI_SECRET_KEY', default='')  # Support both naming conventions
if not OPENAI_API_KEY and OPENAI_SECRET_KEY:
    OPENAI_API_KEY = OPENAI_SECRET_KEY

# Whisper settings
USE_WHISPER = config('USE_WHISPER', default=True, cast=bool)
WHISPER_MODEL = config('WHISPER_MODEL', default='whisper-1')
WHISPER_LANGUAGE = config('WHISPER_LANGUAGE', default=None)  # Auto-detect by default
WHISPER_TEMPERATURE = config('WHISPER_TEMPERATURE', default=0.0, cast=float)
WHISPER_ENABLE_CHORD_DETECTION = config('WHISPER_ENABLE_CHORD_DETECTION', default=True, cast=bool)
WHISPER_MAX_RETRIES = config('WHISPER_MAX_RETRIES', default=3, cast=int)
WHISPER_TIMEOUT = config('WHISPER_TIMEOUT', default=60, cast=int)  # seconds

# Multi-track Processing
ENABLE_MULTITRACK = config('ENABLE_MULTITRACK', default=True, cast=bool)
DEMUCS_MODEL = config('DEMUCS_MODEL', default='htdemucs_ft')  # htdemucs_ft is the best quality model

# Authentication settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth settings
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Can be 'mandatory', 'optional', or 'none'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_LOGOUT_ON_GET = False
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGIN_URL = '/accounts/login/'

# Social account settings
SOCIALACCOUNT_PROVIDERS = {
    'github': {
        'SCOPE': [
            'user',
            'email',
        ],
        'FIELDS': [
            'id',
            'email',
            'name',
            'login',
        ],
    },
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# Require email even for social auth
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'optional'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_LOGIN_ON_GET = False

# OAuth credentials (from environment)
GITHUB_CLIENT_ID = config('GITHUB_CLIENT_ID', default='')
GITHUB_CLIENT_SECRET = config('GITHUB_CLIENT_SECRET', default='')
GOOGLE_CLIENT_ID = config('GOOGLE_CLIENT_ID', default='')
GOOGLE_CLIENT_SECRET = config('GOOGLE_CLIENT_SECRET', default='')

# Crispy forms
CRISPY_ALLOWED_TEMPLATE_PACKS = 'tailwind'
CRISPY_TEMPLATE_PACK = 'tailwind'

# Email backend (for development)
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
    EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@riffscribe.com')
