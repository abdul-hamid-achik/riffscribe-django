services:
  # ============================================
  # WEB SERVICE - Lightweight Django web server
  # ============================================
  website:
    build:
      context: .
      target: development
      cache_from:
        - riffscribe-dev:latest
    image: riffscribe-dev:latest
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for live reload
      - .:/app
      # Cache UV dependencies for faster rebuilds
      - uv_cache_dev:/opt/uv-cache
      # Use shared volumes for data
      - media_volume:/app/media
      - ./tmp:/app/tmp
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://riffscribe:riffscribe_dev@db:5432/riffscribe
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
      - AWS_STORAGE_BUCKET_NAME=riffscribe-media
      - AWS_S3_ENDPOINT_URL=http://storage:9000
      - AWS_S3_USE_SSL=false
      - USE_S3=true
      - MEDIA_URL_ENDPOINT=http://localhost:9000
      # Development-specific settings
      - DJANGO_DEBUG=true
      - DJANGO_DEVELOPMENT=true
    depends_on:
      - redis
      - db
      - storage
    networks:
      - riffscribe_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # WORKER SERVICE - Lightweight AI processing (90% faster builds!)
  # ============================================
  workers:
    build:
      context: .
      target: worker
      cache_from:
        - riffscribe-worker:latest
    image: riffscribe-worker:latest
    command: celery -A riffscribe worker -l info --concurrency=2 --max-memory-per-child=2000000  # Demucs needs memory
    restart: unless-stopped
    volumes:
      - .:/app
      - media_volume:/app/media
      - ./tmp:/app/tmp
      # Separate cache for worker dependencies
      - uv_cache_worker:/opt/uv-cache
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://riffscribe:riffscribe_dev@db:5432/riffscribe
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
      - AWS_STORAGE_BUCKET_NAME=riffscribe-media
      - AWS_S3_ENDPOINT_URL=http://storage:9000
      - AWS_S3_USE_SSL=false
      - USE_S3=true
      - MEDIA_URL_ENDPOINT=http://localhost:9000
    depends_on:
      - redis
      - db
      - storage
    networks:
      - riffscribe_network
    deploy:
      resources:
        limits:
          memory: 4G  # Demucs models need ~3GB memory
        reservations:
          memory: 256M  # Much lower baseline
    healthcheck:
      test: ["CMD", "celery", "-A", "riffscribe", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================
  # SCHEDULER SERVICE - Uses worker target for full dependencies
  # ============================================
  scheduler:
    build:
      context: .
      target: worker
      cache_from:
        - riffscribe-worker:latest
    image: riffscribe-worker:latest
    command: celery -A riffscribe beat -l info
    restart: unless-stopped
    volumes:
      - .:/app
      - uv_cache_worker:/opt/uv-cache
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://riffscribe:riffscribe_dev@db:5432/riffscribe
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - db
    networks:
      - riffscribe_network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - riffscribe_network
    volumes:
      - redis_data:/data

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=riffscribe
      - POSTGRES_USER=riffscribe
      - POSTGRES_PASSWORD=riffscribe_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - riffscribe_network

  # ============================================
  # MONITOR SERVICE - Flower monitoring with proper dependencies
  # ============================================
  monitor:
    build:
      context: .
      target: worker
      cache_from:
        - riffscribe-worker:latest
    image: riffscribe-worker:latest
    command: celery -A riffscribe flower --port=5555 --host=0.0.0.0
    restart: unless-stopped
    ports:
      - "5555:5555"
    volumes:
      - .:/app
      - uv_cache_worker:/opt/uv-cache
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - workers
    networks:
      - riffscribe_network

  storage:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_DEFAULT_BUCKETS: riffscribe-media,riffscribe-exports
    volumes:
      - storage_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - riffscribe_network
    entrypoint: >
      /bin/sh -c "
      /usr/bin/minio server /data --console-address ':9001' &
      sleep 10 &&
      mc alias set local http://storage:9000 minioadmin minioadmin123 &&
      mc mb --ignore-existing local/riffscribe-media &&
      mc mb --ignore-existing local/riffscribe-exports &&
      mc anonymous set public local/riffscribe-media &&
      mc anonymous set public local/riffscribe-exports &&
      tail -f /dev/null
      "

volumes:
  media_volume:
  redis_data:
  postgres_data:
  storage_data:
  # Separate caches for different container types
  uv_cache_web:    # Lightweight web dependencies cache
  uv_cache_worker: # Worker dependencies cache (Demucs + Basic Pitch)
  uv_cache_dev:    # Development environment cache

networks:
  riffscribe_network:
    driver: bridge